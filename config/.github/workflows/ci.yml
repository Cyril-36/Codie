name: ci

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: |
          pre-commit run --all-files

  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Cache uv wheelhouse
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install backend dependencies
        run: |
          uv pip install -r backend/requirements.txt

      - name: Run pytest
        run: |
          pytest -q

      - name: Alembic upgrade check (offline SQL)
        env:
          ALEMBIC_DATABASE_URL: sqlite:///./test_migrations.db
        run: |
          alembic upgrade head --sql

  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"

      - name: Install dependencies
        working-directory: frontend
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Lint
        working-directory: frontend
        run: |
          corepack enable
          pnpm run lint

      - name: Test (vitest)
        working-directory: frontend
        run: |
          corepack enable
          pnpm run test

      - name: Coverage (vitest)
        working-directory: frontend
        run: |
          corepack enable
          pnpm run test -- --coverage

      - name: Upload frontend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

      - name: Build frontend
        working-directory: frontend
        run: pnpm run build

      - name: Check bundle size (gzipped)
        working-directory: frontend
        run: |
          # Find the main JS asset and check its gzipped size against a 550 KB limit
          MAIN=$(ls -1 dist/assets/*.js | head -n 1)
          if [ -z "$MAIN" ]; then echo "No JS asset found in dist/assets"; exit 1; fi
          BYTES=$(gzip -c "$MAIN" | wc -c | tr -d ' ')
          MAX=550000
          echo "Gzipped bundle size: ${BYTES} bytes (limit ${MAX})"
          if [ "$BYTES" -gt "$MAX" ]; then
            echo "‚ùå Bundle too large"; exit 1;
          fi
