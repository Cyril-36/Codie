name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Backend Testing and Quality Checks
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: codie_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd src/backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev,test]"
    
    - name: Lint with ruff
      run: |
        cd src/backend
        ruff check .
    
    - name: Format check with black
      run: |
        cd src/backend
        black --check .
    
    - name: Type check with mypy
      run: |
        cd src/backend
        mypy app/
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codie_test
      run: |
        cd src/backend
        pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Security scan with bandit
      run: |
        cd src/backend
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          src/backend/coverage.xml
          src/backend/htmlcov/
          src/backend/bandit-report.json

  # Frontend Testing and Quality Checks
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Cache pnpm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('src/frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
    
    - name: Install dependencies
      run: |
        cd src/frontend
        pnpm install --frozen-lockfile
    
    - name: Type check
      run: |
        cd src/frontend
        pnpm type-check
    
    - name: Lint
      run: |
        cd src/frontend
        pnpm lint
    
    - name: Format check
      run: |
        cd src/frontend
        pnpm format:check
    
    - name: Unit tests
      run: |
        cd src/frontend
        pnpm test:coverage
    
    - name: Build
      run: |
        cd src/frontend
        pnpm build
    
    - name: Install Playwright browsers
      run: |
        cd src/frontend
        npx playwright install --with-deps chromium
    
    - name: E2E tests
      run: |
        cd src/frontend
        pnpm test:e2e
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          src/frontend/coverage/
          src/frontend/test-results/
          src/frontend/playwright-report/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python, javascript

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: src/backend
        push: true
        tags: |
          codie/backend:latest
          codie/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: src/frontend
        push: true
        tags: |
          codie/frontend:latest
          codie/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f deployments/staging/
    
    - name: Run smoke tests
      run: |
        cd src/frontend
        npm install
        npx playwright test src/__tests__/integration/smoke-flow.test.ts
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f deployments/production/
    
    - name: Run health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
